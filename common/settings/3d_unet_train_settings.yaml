# Things you might want to change
# -------------------------------
cuda_device: 3 # The graphics card to use (between 0 and 3 for a machine with 4 GPUs)
model_output_fn: trained3dUnet_model # Suffix for the saved U-net model filename
normalise: false # Rescale the image intensities and rescale to uint8 before training
st_dev_factor: 2.575 # The number of standard deviations from the mean to clip data to
train_data_hdf5_path: /data # The internal HDF5 path to the image data
seg_hdf5_path: /data # The internal HDF5 path to the label data
# Training parameters
num_epochs: 10 # Maximum number of epochs for training
patience: 4 # Number of epoch to wait before early stopping if validation loss does not improve
loss_criterion: DiceLoss # Choose from one of [BCEDiceLoss, BCELoss, DiceLoss, GeneralizedDiceLoss, CrossEntropyLoss]
alpha: 0.75 # When BCEDiceLoss selected, weighting for BCELoss
beta: 0.25 # When BCEDiceLoss selected, weighting for DiceLoss
eval_metric: MeanIoU # Choose from one of [MeanIoU, GenericAveragePrecision]
# Parameters for generating training patches
patch_size:
  [128, 128, 128]
train_patches: 48 # Number of patches to sample from the training volume
valid_patches: 12 # Number of patches to sample from the validation volume
max_queue_length: 48 # Maximum queue of pathches to create (the larger the number the more RAM required)
num_workers: 8 # Number of processor cores to use to generate patches

# Things that you probably shouldn't change
# -----------------------------------------
# Parameters for finding learning rate
starting_lr: 1e-6 # Lower bound of learning rate search
end_lr: 10 # Upper Bound of learning rate search
lr_find_epochs: 1 # Number of training epochs for learning rate search

# Parameters to control unet architecture
model:
  # model class, e.g. UNet3D, ResidualUNet3D
  name: ResidualUNet3D
  # number of input channels to the model
  in_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcr
  # feature maps scale factor
  f_maps: 32
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: False
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks
  # returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: False
